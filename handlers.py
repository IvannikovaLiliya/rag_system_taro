import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import rag_system_taro.app.keyboard as kb
from aiogram.fsm.state import State, StatesGroup
# from .Class_tg import TaroBot
import os
import sys
sys.path.append(os.path.abspath("rag_system_taro"))

from rag_system_taro.taro import RagModel


ragm = RagModel()





# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

# –ú–æ–¥–µ–ª—å–∫–∞
ragm = RagModel()

ratings_count = {"like": 0,
                 "dislike": 0,
                 }



class StocksState(StatesGroup):
    situation = State()
    card = State()
    combination = State()



@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç: –î–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.'
                         ' –¢–∞–∫ –∂–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–∏—Ç –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—à—å (–ö–æ–ª–æ–¥–∞ –£–∞–π—Ç–∞) –∏ —Ä–∞—Å—Å–∫–∞–∂—É,'
                         ' —á—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–æ—á–∏—Ç–∞–Ω–∏—è 2—Ö –∫–∞—Ä—Ç –∏–∑ —ç—Ç–æ–π –∂–µ –∫–æ–ª–æ–¥—ã',reply_markup=kb.knopki)




@router.message(F.text == 'üîÆ–†–∞—Å–∫–ª–∞–¥')
async def rasklad(message: Message, state: FSMContext):
    await state.set_state(StocksState.situation)
    await message.answer('–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é.')

@router.message(StocksState.situation)
async def mean_comb(message: Message, state: FSMContext):
    await state.update_data(situation=message.text)
    text = await state.get_data()
    flag = 1
    taro = RagModel()
    # await message.answer(f'–í–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è: {text["situation"]}')
    answer = taro.rag_luanch(text["situation"], flag)
    await message.answer(f'–†–∞—Å–∫–ª–∞–¥ –ø–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏: {answer}',reply_markup=kb.like_dislike)
    await state.clear()




@router.message(F.text == 'üÉè–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã')
async def card(message: Message, state: FSMContext):
    await state.set_state(StocksState.card)
    await message.answer('–û–ø–∏—à–∏ –∫–∞—Ä—Ç—É.')

@router.message(StocksState.card)
async def mean_comb(message: Message, state: FSMContext):
    await state.update_data(card=message.text)
    text = await state.get_data()
    flag = 0
    taro = TaroBot()
    # await message.answer(f'–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {text["card"]}')
    answer = taro.rag_luanch(text['card'],flag)
    await message.answer(f'–í–æ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã: {answer}',reply_markup=kb.like_dislike)
    await state.clear()




@router.message(F.text == '‚ô†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏')
async def combination(message: Message, state: FSMContext):
    await state.set_state(StocksState.combination)
    await message.answer('–û–ø–∏—à–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.')



@router.message(StocksState.combination)
async def mean_comb(message: Message, state: FSMContext):
    await state.update_data(combination=message.text)
    text = await state.get_data()
    flag = 0
    taro = TaroBot()
    # await message.answer(f'–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {text["combination"]}')
    answer = taro.rag_luanch(text["combination"],flag)
    await message.answer(f'–í–æ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {answer}',reply_markup=kb.like_dislike)
    await state.clear()


# @router.callback_query(F.data.in_(['like','dislike','Continue']))
# async def answer_metric(callback: CallbackQuery):
#     # await callback.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞–ª—å—à–µ',reply_markup=kb.cont_comp)
#     await callback.message.edit_reply_markup(reply_markup=None)
#     await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞–ª—å—à–µ?", reply_markup=kb.knopki)


@router.callback_query(F.data.in_(["like", "dislike"]))
async def answer_metric(callback: CallbackQuery):
    global ratings_count
    rating = callback.data

    ratings_count[rating] += 1

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞–ª—å—à–µ?", reply_markup=kb.knopki)


@router.callback_query(F.data.in_(["Continue"]))
async def answer_cont(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞–ª—å—à–µ?", reply_markup=kb.knopki)




@router.message(F.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_command(message: Message):
    likes = ratings_count["like"]
    dislikes = ratings_count["dislike"]
    await message.answer(f"üëç –õ–∞–π–∫–æ–≤: {likes}\nüëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}\n")






@router.message()
async def unknown_message(message: Message):
    await message.answer("ü§î –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=kb.knopki)




async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token='7870948069:AAGM7p4-yz8Nm93vZvvIYnFfN937wU0IwB4')
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)
